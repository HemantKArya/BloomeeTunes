plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}


def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}


def keystoreProperties = new Properties()
   def keystorePropertiesFile = rootProject.file('key.properties')
   

android {
    namespace "ls.bloomee.musicplayer"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    // flavorDimensions "flavors"
    // productFlavors {
    //     // debug flavor 
    //     dev {
    //         dimension "flavors"
    //         applicationIdSuffix ".dev"
    //         versionNameSuffix "-dev"
    //     }
    // }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "ls.bloomee.musicplayer"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        // minSdkVersion flutter.minSdkVersion
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    // include splits for different architectures and universal APK. (arm64-v8a, armeabi-v7a, x86, x86_64)
    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            universalApk true
        }
    }

    // Removing DEPENDENCY_INFO_BLOCK from the build.gradle file (For FOSS compliance)
    dependenciesInfo {
        // Disables dependency metadata when building APKs.
        includeInApk = false
        // Disables dependency metadata when building Android App Bundles.
        includeInBundle = false
    }

       signingConfigs {

if (keystorePropertiesFile.exists()) {
       keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
          release {
           keyAlias keystoreProperties['keyAlias']
           keyPassword keystoreProperties['keyPassword']
           storeFile rootProject.file('bloomee.jks')
           storePassword keystoreProperties['storePassword']
       }

       }

   }
   buildTypes {
       release {
        if (keystorePropertiesFile.exists()) {
            println("keystorePropertiesFile exists")
            signingConfig signingConfigs.release
        }
        else {
            println("keystorePropertiesFile does not exist")
            signingConfig signingConfigs.debug
        }
        // signingConfig signingConfigs.debug
        //    signingConfig signingConfigs.release
       }
   }

}

flutter {
    source '../..'
}



// ext.abiCodes = ["x86_64": 1, "armeabi-v7a": 2, "arm64-v8a": 3, "x86": 4]
// android.applicationVariants.all { variant ->
//   variant.outputs.each { output ->
//   def abi = output.getFilter(com.android.build.OutputFile.ABI)
//     def abiVersionCode = project.ext.abiCodes.get(abi)
//     if (abiVersionCode != null) {
//       output.versionCodeOverride = variant.versionCode
//     }
//   }
// }
